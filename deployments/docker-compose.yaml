version: '3.8'
services:
  dynamodb:
    image: amazon/dynamodb-local:latest
    container_name: dynamodb
    hostname: dynamodb
    restart: always
    ports:
      - "8000:8000"
    networks:
      - contract-service
    volumes:
      - ./dynamodb:/home/dynamodb/data

  aws-cli:
    image: amazon/aws-cli
    depends_on:
      - dynamodb
    environment:
      AWS_ENDPOINT: --endpoint-url=http://dynamodb:8000
    entrypoint: /bin/sh -c
    volumes:
      - ./dynamodb:/dynamodb
    networks:
      - contract-service
    command: >
      '
      for script_name in /dynamodb/*.sh; do
        sh $$script_name
      done
      '


  signer:
    build:
      context: ..
      dockerfile: ./build/signer/Dockerfile
    restart: always
    environment:
      TABLE_NAME: "ContractPrivateKeyRepository"
      AWS_ENDPOINT: "dynamodb:8000"
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: "xxx"
      AWS_SECRET_ACCESS_KEY: "yyy"
      SSL_ENABLED: "false"
      PORT: 8081
    ports:
      - "8081:8081"
    networks:
      - contract-service
    depends_on:
      dynamodb:
        condition: service_started
      aws-cli:
        condition: service_started
    healthcheck:
      test: [ "CMD", "/bin/grpc_health_probe", "-addr=localhost:8081", "-v", "-service=SignerService"]
      interval: 2s
      timeout: 2s
      start_period: 1s

  contract-manager:
    build:
      context: ..
      dockerfile: ./build/contract-manager/Dockerfile
    restart: always
    environment:
      TABLE_NAME: "Contracts"
      AWS_ENDPOINT: "dynamodb:8000"
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: "xxx"
      AWS_SECRET_ACCESS_KEY: "yyy"
      SSL_ENABLED: "false"
      PORT: 8082
    ports:
      - "8082:8082"
    networks:
      - contract-service
    depends_on:
      dynamodb:
        condition: service_started
      aws-cli:
        condition: service_started
    healthcheck:
      test: [ "CMD", "/bin/grpc_health_probe", "-addr=localhost:8082", "-v", "-service=ContractManagementService"]
      interval: 2s
      timeout: 2s
      start_period: 1s

  transaction-manager:
    build:
      context: ..
      dockerfile: ./build/transaction-manager/Dockerfile
    restart: always
    environment:
      CONTRACT_TABLE_NAME: "Contracts"
      TRANSACTION_TABLE_NAME: "Transactions"
      SIGNER_HOST: "signer:8081"
      AWS_REGION: "us-east-1"
      AWS_ENDPOINT: "dynamodb:8000"
      AWS_ACCESS_KEY_ID: "xxx"
      AWS_SECRET_ACCESS_KEY: "yyy"
      SSL_ENABLED: "false"
      PORT: 8083
    ports:
      - "8083:8083"
    networks:
      - contract-service
    depends_on:
      dynamodb:
        condition: service_started
      signer:
        condition: service_healthy
      aws-cli:
        condition: service_started
    healthcheck:
      test: [ "CMD", "/bin/grpc_health_probe", "-addr=localhost:8083", "-v", "-service=TransactionService"]
      interval: 2s
      timeout: 2s
      start_period: 1s


  web:
    build:
      context: ..
      dockerfile: ./build/web/Dockerfile
    restart: always
    environment:
      PORT: 8084
      ALIVE_PORT: 8080
      TXN_HOST: "transaction-manager:8083"
    ports:
      - "8084:8084"
    networks:
      - contract-service
    depends_on:
      contract-manager:
        condition: service_healthy
      signer:
        condition: service_healthy
      transaction-manager:
        condition: service_healthy

  api:
    build:
      context: ..
      dockerfile: ./build/api/Dockerfile
    restart: always
    environment:
      TXN_HOST: "transaction-manager:8083"
      PORT: 8085
    ports:
      - "8085:8085"
    networks:
      - contract-service
    depends_on:
      contract-manager:
        condition: service_healthy
      signer:
        condition: service_healthy
      transaction-manager:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "/bin/grpc_health_probe", "-addr=localhost:8085", "-v", "-service=ContractIntegrationService"]
      interval: 2s
      timeout: 2s
      start_period: 1s



networks:
  contract-service: {}
