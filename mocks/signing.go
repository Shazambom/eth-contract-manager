// Code generated by MockGen. DO NOT EDIT.
// Source: ./signing/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
)

// MockSigningService is a mock of SigningService interface.
type MockSigningService struct {
	ctrl     *gomock.Controller
	recorder *MockSigningServiceMockRecorder
}

// MockSigningServiceMockRecorder is the mock recorder for MockSigningService.
type MockSigningServiceMockRecorder struct {
	mock *MockSigningService
}

// NewMockSigningService creates a new mock instance.
func NewMockSigningService(ctrl *gomock.Controller) *MockSigningService {
	mock := &MockSigningService{ctrl: ctrl}
	mock.recorder = &MockSigningServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigningService) EXPECT() *MockSigningServiceMockRecorder {
	return m.recorder
}

// AddressToEIP55 mocks base method.
func (m *MockSigningService) AddressToEIP55(address string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressToEIP55", address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressToEIP55 indicates an expected call of AddressToEIP55.
func (mr *MockSigningServiceMockRecorder) AddressToEIP55(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressToEIP55", reflect.TypeOf((*MockSigningService)(nil).AddressToEIP55), address)
}

// GenerateKey mocks base method.
func (m *MockSigningService) GenerateKey() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateKey indicates an expected call of GenerateKey.
func (mr *MockSigningServiceMockRecorder) GenerateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKey", reflect.TypeOf((*MockSigningService)(nil).GenerateKey))
}

// PrivateKeyToAddress mocks base method.
func (m *MockSigningService) PrivateKeyToAddress(privateKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateKeyToAddress", privateKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateKeyToAddress indicates an expected call of PrivateKeyToAddress.
func (mr *MockSigningServiceMockRecorder) PrivateKeyToAddress(privateKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateKeyToAddress", reflect.TypeOf((*MockSigningService)(nil).PrivateKeyToAddress), privateKey)
}

// SignMessage mocks base method.
func (m *MockSigningService) SignMessage(signingKey, message string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignMessage", signingKey, message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignMessage indicates an expected call of SignMessage.
func (mr *MockSigningServiceMockRecorder) SignMessage(signingKey, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignMessage", reflect.TypeOf((*MockSigningService)(nil).SignMessage), signingKey, message)
}

// SignTxn mocks base method.
func (m *MockSigningService) SignTxn(signingKey string, args [][]byte) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTxn", signingKey, args)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignTxn indicates an expected call of SignTxn.
func (mr *MockSigningServiceMockRecorder) SignTxn(signingKey, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTxn", reflect.TypeOf((*MockSigningService)(nil).SignTxn), signingKey, args)
}

// Verify mocks base method.
func (m *MockSigningService) Verify(message, signature, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", message, signature, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockSigningServiceMockRecorder) Verify(message, signature, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockSigningService)(nil).Verify), message, signature, address)
}

// VerifyFromHash mocks base method.
func (m *MockSigningService) VerifyFromHash(signature []byte, hash common.Hash, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyFromHash", signature, hash, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyFromHash indicates an expected call of VerifyFromHash.
func (mr *MockSigningServiceMockRecorder) VerifyFromHash(signature, hash, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyFromHash", reflect.TypeOf((*MockSigningService)(nil).VerifyFromHash), signature, hash, address)
}
