// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/minting_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	pb "contract-service/proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockContractIntegrationClient is a mock of ContractIntegrationClient interface.
type MockContractIntegrationClient struct {
	ctrl     *gomock.Controller
	recorder *MockContractIntegrationClientMockRecorder
}

// MockContractIntegrationClientMockRecorder is the mock recorder for MockContractIntegrationClient.
type MockContractIntegrationClientMockRecorder struct {
	mock *MockContractIntegrationClient
}

// NewMockContractIntegrationClient creates a new mock instance.
func NewMockContractIntegrationClient(ctrl *gomock.Controller) *MockContractIntegrationClient {
	mock := &MockContractIntegrationClient{ctrl: ctrl}
	mock.recorder = &MockContractIntegrationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractIntegrationClient) EXPECT() *MockContractIntegrationClientMockRecorder {
	return m.recorder
}

// BuildClaimTransaction mocks base method.
func (m *MockContractIntegrationClient) BuildClaimTransaction(ctx context.Context, in *pb.ClaimRequest, opts ...grpc.CallOption) (*pb.MintResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildClaimTransaction", varargs...)
	ret0, _ := ret[0].(*pb.MintResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildClaimTransaction indicates an expected call of BuildClaimTransaction.
func (mr *MockContractIntegrationClientMockRecorder) BuildClaimTransaction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildClaimTransaction", reflect.TypeOf((*MockContractIntegrationClient)(nil).BuildClaimTransaction), varargs...)
}

// BuildMintTransaction mocks base method.
func (m *MockContractIntegrationClient) BuildMintTransaction(ctx context.Context, in *pb.MintRequest, opts ...grpc.CallOption) (*pb.MintResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildMintTransaction", varargs...)
	ret0, _ := ret[0].(*pb.MintResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildMintTransaction indicates an expected call of BuildMintTransaction.
func (mr *MockContractIntegrationClientMockRecorder) BuildMintTransaction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildMintTransaction", reflect.TypeOf((*MockContractIntegrationClient)(nil).BuildMintTransaction), varargs...)
}

// MockContractIntegrationServer is a mock of ContractIntegrationServer interface.
type MockContractIntegrationServer struct {
	ctrl     *gomock.Controller
	recorder *MockContractIntegrationServerMockRecorder
}

// MockContractIntegrationServerMockRecorder is the mock recorder for MockContractIntegrationServer.
type MockContractIntegrationServerMockRecorder struct {
	mock *MockContractIntegrationServer
}

// NewMockContractIntegrationServer creates a new mock instance.
func NewMockContractIntegrationServer(ctrl *gomock.Controller) *MockContractIntegrationServer {
	mock := &MockContractIntegrationServer{ctrl: ctrl}
	mock.recorder = &MockContractIntegrationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractIntegrationServer) EXPECT() *MockContractIntegrationServerMockRecorder {
	return m.recorder
}

// BuildClaimTransaction mocks base method.
func (m *MockContractIntegrationServer) BuildClaimTransaction(arg0 context.Context, arg1 *pb.ClaimRequest) (*pb.MintResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildClaimTransaction", arg0, arg1)
	ret0, _ := ret[0].(*pb.MintResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildClaimTransaction indicates an expected call of BuildClaimTransaction.
func (mr *MockContractIntegrationServerMockRecorder) BuildClaimTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildClaimTransaction", reflect.TypeOf((*MockContractIntegrationServer)(nil).BuildClaimTransaction), arg0, arg1)
}

// BuildMintTransaction mocks base method.
func (m *MockContractIntegrationServer) BuildMintTransaction(arg0 context.Context, arg1 *pb.MintRequest) (*pb.MintResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildMintTransaction", arg0, arg1)
	ret0, _ := ret[0].(*pb.MintResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildMintTransaction indicates an expected call of BuildMintTransaction.
func (mr *MockContractIntegrationServerMockRecorder) BuildMintTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildMintTransaction", reflect.TypeOf((*MockContractIntegrationServer)(nil).BuildMintTransaction), arg0, arg1)
}

// mustEmbedUnimplementedContractIntegrationServer mocks base method.
func (m *MockContractIntegrationServer) mustEmbedUnimplementedContractIntegrationServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedContractIntegrationServer")
}

// mustEmbedUnimplementedContractIntegrationServer indicates an expected call of mustEmbedUnimplementedContractIntegrationServer.
func (mr *MockContractIntegrationServerMockRecorder) mustEmbedUnimplementedContractIntegrationServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedContractIntegrationServer", reflect.TypeOf((*MockContractIntegrationServer)(nil).mustEmbedUnimplementedContractIntegrationServer))
}

// MockUnsafeContractIntegrationServer is a mock of UnsafeContractIntegrationServer interface.
type MockUnsafeContractIntegrationServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeContractIntegrationServerMockRecorder
}

// MockUnsafeContractIntegrationServerMockRecorder is the mock recorder for MockUnsafeContractIntegrationServer.
type MockUnsafeContractIntegrationServerMockRecorder struct {
	mock *MockUnsafeContractIntegrationServer
}

// NewMockUnsafeContractIntegrationServer creates a new mock instance.
func NewMockUnsafeContractIntegrationServer(ctrl *gomock.Controller) *MockUnsafeContractIntegrationServer {
	mock := &MockUnsafeContractIntegrationServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeContractIntegrationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeContractIntegrationServer) EXPECT() *MockUnsafeContractIntegrationServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedContractIntegrationServer mocks base method.
func (m *MockUnsafeContractIntegrationServer) mustEmbedUnimplementedContractIntegrationServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedContractIntegrationServer")
}

// mustEmbedUnimplementedContractIntegrationServer indicates an expected call of mustEmbedUnimplementedContractIntegrationServer.
func (mr *MockUnsafeContractIntegrationServerMockRecorder) mustEmbedUnimplementedContractIntegrationServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedContractIntegrationServer", reflect.TypeOf((*MockUnsafeContractIntegrationServer)(nil).mustEmbedUnimplementedContractIntegrationServer))
}
