// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	storage "contract-service/storage"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRedisListener is a mock of RedisListener interface.
type MockRedisListener struct {
	ctrl     *gomock.Controller
	recorder *MockRedisListenerMockRecorder
}

// MockRedisListenerMockRecorder is the mock recorder for MockRedisListener.
type MockRedisListenerMockRecorder struct {
	mock *MockRedisListener
}

// NewMockRedisListener creates a new mock instance.
func NewMockRedisListener(ctrl *gomock.Controller) *MockRedisListener {
	mock := &MockRedisListener{ctrl: ctrl}
	mock.recorder = &MockRedisListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisListener) EXPECT() *MockRedisListenerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRedisListener) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRedisListenerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRedisListener)(nil).Close))
}

// InitEvents mocks base method.
func (m *MockRedisListener) InitEvents() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitEvents")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitEvents indicates an expected call of InitEvents.
func (mr *MockRedisListenerMockRecorder) InitEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitEvents", reflect.TypeOf((*MockRedisListener)(nil).InitEvents))
}

// Listen mocks base method.
func (m *MockRedisListener) Listen(handler func(string, string, error) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockRedisListenerMockRecorder) Listen(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockRedisListener)(nil).Listen), handler)
}

// Ping mocks base method.
func (m *MockRedisListener) Ping() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockRedisListenerMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRedisListener)(nil).Ping))
}

// MockRedisWriter is a mock of RedisWriter interface.
type MockRedisWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRedisWriterMockRecorder
}

// MockRedisWriterMockRecorder is the mock recorder for MockRedisWriter.
type MockRedisWriterMockRecorder struct {
	mock *MockRedisWriter
}

// NewMockRedisWriter creates a new mock instance.
func NewMockRedisWriter(ctrl *gomock.Controller) *MockRedisWriter {
	mock := &MockRedisWriter{ctrl: ctrl}
	mock.recorder = &MockRedisWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisWriter) EXPECT() *MockRedisWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRedisWriter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRedisWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRedisWriter)(nil).Close))
}

// Get mocks base method.
func (m *MockRedisWriter) Get(ctx context.Context, address, contractAddres string) (*storage.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, address, contractAddres)
	ret0, _ := ret[0].(*storage.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisWriterMockRecorder) Get(ctx, address, contractAddres interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisWriter)(nil).Get), ctx, address, contractAddres)
}

// GetQueueNum mocks base method.
func (m *MockRedisWriter) GetQueueNum(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueNum", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueNum indicates an expected call of GetQueueNum.
func (mr *MockRedisWriterMockRecorder) GetQueueNum(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueNum", reflect.TypeOf((*MockRedisWriter)(nil).GetQueueNum), ctx)
}

// GetReservedCount mocks base method.
func (m *MockRedisWriter) GetReservedCount(ctx context.Context, numRequested, maxMintable int, contractAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservedCount", ctx, numRequested, maxMintable, contractAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetReservedCount indicates an expected call of GetReservedCount.
func (mr *MockRedisWriterMockRecorder) GetReservedCount(ctx, numRequested, maxMintable, contractAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservedCount", reflect.TypeOf((*MockRedisWriter)(nil).GetReservedCount), ctx, numRequested, maxMintable, contractAddress)
}

// IncrementCounter mocks base method.
func (m *MockRedisWriter) IncrementCounter(ctx context.Context, numRequested, maxMintable int, contractAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementCounter", ctx, numRequested, maxMintable, contractAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementCounter indicates an expected call of IncrementCounter.
func (mr *MockRedisWriterMockRecorder) IncrementCounter(ctx, numRequested, maxMintable, contractAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCounter", reflect.TypeOf((*MockRedisWriter)(nil).IncrementCounter), ctx, numRequested, maxMintable, contractAddress)
}

// MarkAddressAsUsed mocks base method.
func (m *MockRedisWriter) MarkAddressAsUsed(ctx context.Context, token *storage.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAddressAsUsed", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAddressAsUsed indicates an expected call of MarkAddressAsUsed.
func (mr *MockRedisWriterMockRecorder) MarkAddressAsUsed(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAddressAsUsed", reflect.TypeOf((*MockRedisWriter)(nil).MarkAddressAsUsed), ctx, token)
}

// Ping mocks base method.
func (m *MockRedisWriter) Ping() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockRedisWriterMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRedisWriter)(nil).Ping))
}

// VerifyValidAddress mocks base method.
func (m *MockRedisWriter) VerifyValidAddress(ctx context.Context, address, contractAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyValidAddress", ctx, address, contractAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyValidAddress indicates an expected call of VerifyValidAddress.
func (mr *MockRedisWriterMockRecorder) VerifyValidAddress(ctx, address, contractAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyValidAddress", reflect.TypeOf((*MockRedisWriter)(nil).VerifyValidAddress), ctx, address, contractAddress)
}

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// CompleteTransaction mocks base method.
func (m *MockTransactionRepository) CompleteTransaction(ctx context.Context, address, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteTransaction", ctx, address, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteTransaction indicates an expected call of CompleteTransaction.
func (mr *MockTransactionRepositoryMockRecorder) CompleteTransaction(ctx, address, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).CompleteTransaction), ctx, address, hash)
}

// DeleteTransaction mocks base method.
func (m *MockTransactionRepository) DeleteTransaction(ctx context.Context, address, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", ctx, address, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockTransactionRepositoryMockRecorder) DeleteTransaction(ctx, address, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).DeleteTransaction), ctx, address, hash)
}

// GetAllTransactions mocks base method.
func (m *MockTransactionRepository) GetAllTransactions(ctx context.Context, address string) ([]*storage.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransactions", ctx, address)
	ret0, _ := ret[0].([]*storage.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransactions indicates an expected call of GetAllTransactions.
func (mr *MockTransactionRepositoryMockRecorder) GetAllTransactions(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransactions", reflect.TypeOf((*MockTransactionRepository)(nil).GetAllTransactions), ctx, address)
}

// GetTransactions mocks base method.
func (m *MockTransactionRepository) GetTransactions(ctx context.Context, address string) ([]*storage.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, address)
	ret0, _ := ret[0].([]*storage.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockTransactionRepositoryMockRecorder) GetTransactions(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockTransactionRepository)(nil).GetTransactions), ctx, address)
}

// StoreTransaction mocks base method.
func (m *MockTransactionRepository) StoreTransaction(ctx context.Context, token storage.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTransaction", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreTransaction indicates an expected call of StoreTransaction.
func (mr *MockTransactionRepositoryMockRecorder) StoreTransaction(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).StoreTransaction), ctx, token)
}

// MockPrivateKeyRepository is a mock of PrivateKeyRepository interface.
type MockPrivateKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateKeyRepositoryMockRecorder
}

// MockPrivateKeyRepositoryMockRecorder is the mock recorder for MockPrivateKeyRepository.
type MockPrivateKeyRepositoryMockRecorder struct {
	mock *MockPrivateKeyRepository
}

// NewMockPrivateKeyRepository creates a new mock instance.
func NewMockPrivateKeyRepository(ctrl *gomock.Controller) *MockPrivateKeyRepository {
	mock := &MockPrivateKeyRepository{ctrl: ctrl}
	mock.recorder = &MockPrivateKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateKeyRepository) EXPECT() *MockPrivateKeyRepositoryMockRecorder {
	return m.recorder
}

// DeletePrivateKey mocks base method.
func (m *MockPrivateKeyRepository) DeletePrivateKey(ctx context.Context, contractAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivateKey", ctx, contractAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrivateKey indicates an expected call of DeletePrivateKey.
func (mr *MockPrivateKeyRepositoryMockRecorder) DeletePrivateKey(ctx, contractAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivateKey", reflect.TypeOf((*MockPrivateKeyRepository)(nil).DeletePrivateKey), ctx, contractAddress)
}

// GetPrivateKey mocks base method.
func (m *MockPrivateKeyRepository) GetPrivateKey(ctx context.Context, contractAddress string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey", ctx, contractAddress)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockPrivateKeyRepositoryMockRecorder) GetPrivateKey(ctx, contractAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockPrivateKeyRepository)(nil).GetPrivateKey), ctx, contractAddress)
}

// UpsertPrivateKey mocks base method.
func (m *MockPrivateKeyRepository) UpsertPrivateKey(ctx context.Context, contractAddress, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPrivateKey", ctx, contractAddress, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPrivateKey indicates an expected call of UpsertPrivateKey.
func (mr *MockPrivateKeyRepositoryMockRecorder) UpsertPrivateKey(ctx, contractAddress, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPrivateKey", reflect.TypeOf((*MockPrivateKeyRepository)(nil).UpsertPrivateKey), ctx, contractAddress, key)
}

// MockContractRepository is a mock of ContractRepository interface.
type MockContractRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContractRepositoryMockRecorder
}

// MockContractRepositoryMockRecorder is the mock recorder for MockContractRepository.
type MockContractRepositoryMockRecorder struct {
	mock *MockContractRepository
}

// NewMockContractRepository creates a new mock instance.
func NewMockContractRepository(ctrl *gomock.Controller) *MockContractRepository {
	mock := &MockContractRepository{ctrl: ctrl}
	mock.recorder = &MockContractRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractRepository) EXPECT() *MockContractRepositoryMockRecorder {
	return m.recorder
}

// DeleteContract mocks base method.
func (m *MockContractRepository) DeleteContract(ctx context.Context, contractAddress, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContract", ctx, contractAddress, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContract indicates an expected call of DeleteContract.
func (mr *MockContractRepositoryMockRecorder) DeleteContract(ctx, contractAddress, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContract", reflect.TypeOf((*MockContractRepository)(nil).DeleteContract), ctx, contractAddress, owner)
}

// GetContract mocks base method.
func (m *MockContractRepository) GetContract(ctx context.Context, contractAddress string) (*storage.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract", ctx, contractAddress)
	ret0, _ := ret[0].(*storage.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract indicates an expected call of GetContract.
func (mr *MockContractRepositoryMockRecorder) GetContract(ctx, contractAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockContractRepository)(nil).GetContract), ctx, contractAddress)
}

// GetContractsByOwner mocks base method.
func (m *MockContractRepository) GetContractsByOwner(ctx context.Context, owner string) ([]*storage.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractsByOwner", ctx, owner)
	ret0, _ := ret[0].([]*storage.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractsByOwner indicates an expected call of GetContractsByOwner.
func (mr *MockContractRepositoryMockRecorder) GetContractsByOwner(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractsByOwner", reflect.TypeOf((*MockContractRepository)(nil).GetContractsByOwner), ctx, owner)
}

// UpsertContract mocks base method.
func (m *MockContractRepository) UpsertContract(ctx context.Context, contract *storage.Contract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertContract", ctx, contract)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertContract indicates an expected call of UpsertContract.
func (mr *MockContractRepositoryMockRecorder) UpsertContract(ctx, contract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertContract", reflect.TypeOf((*MockContractRepository)(nil).UpsertContract), ctx, contract)
}
