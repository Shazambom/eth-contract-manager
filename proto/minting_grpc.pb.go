// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/minting.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContractIntegrationClient is the client API for ContractIntegration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractIntegrationClient interface {
	BuildMintTransaction(ctx context.Context, in *MintRequest, opts ...grpc.CallOption) (*MintResponse, error)
	BuildClaimTransaction(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*MintResponse, error)
}

type contractIntegrationClient struct {
	cc grpc.ClientConnInterface
}

func NewContractIntegrationClient(cc grpc.ClientConnInterface) ContractIntegrationClient {
	return &contractIntegrationClient{cc}
}

func (c *contractIntegrationClient) BuildMintTransaction(ctx context.Context, in *MintRequest, opts ...grpc.CallOption) (*MintResponse, error) {
	out := new(MintResponse)
	err := c.cc.Invoke(ctx, "/ContractIntegration/BuildMintTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractIntegrationClient) BuildClaimTransaction(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*MintResponse, error) {
	out := new(MintResponse)
	err := c.cc.Invoke(ctx, "/ContractIntegration/BuildClaimTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractIntegrationServer is the server API for ContractIntegration service.
// All implementations must embed UnimplementedContractIntegrationServer
// for forward compatibility
type ContractIntegrationServer interface {
	BuildMintTransaction(context.Context, *MintRequest) (*MintResponse, error)
	BuildClaimTransaction(context.Context, *ClaimRequest) (*MintResponse, error)
	mustEmbedUnimplementedContractIntegrationServer()
}

// UnimplementedContractIntegrationServer must be embedded to have forward compatible implementations.
type UnimplementedContractIntegrationServer struct {
}

func (UnimplementedContractIntegrationServer) BuildMintTransaction(context.Context, *MintRequest) (*MintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildMintTransaction not implemented")
}
func (UnimplementedContractIntegrationServer) BuildClaimTransaction(context.Context, *ClaimRequest) (*MintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildClaimTransaction not implemented")
}
func (UnimplementedContractIntegrationServer) mustEmbedUnimplementedContractIntegrationServer() {}

// UnsafeContractIntegrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractIntegrationServer will
// result in compilation errors.
type UnsafeContractIntegrationServer interface {
	mustEmbedUnimplementedContractIntegrationServer()
}

func RegisterContractIntegrationServer(s grpc.ServiceRegistrar, srv ContractIntegrationServer) {
	s.RegisterService(&ContractIntegration_ServiceDesc, srv)
}

func _ContractIntegration_BuildMintTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractIntegrationServer).BuildMintTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContractIntegration/BuildMintTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractIntegrationServer).BuildMintTransaction(ctx, req.(*MintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractIntegration_BuildClaimTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractIntegrationServer).BuildClaimTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContractIntegration/BuildClaimTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractIntegrationServer).BuildClaimTransaction(ctx, req.(*ClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContractIntegration_ServiceDesc is the grpc.ServiceDesc for ContractIntegration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContractIntegration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ContractIntegration",
	HandlerType: (*ContractIntegrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildMintTransaction",
			Handler:    _ContractIntegration_BuildMintTransaction_Handler,
		},
		{
			MethodName: "BuildClaimTransaction",
			Handler:    _ContractIntegration_BuildClaimTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/minting.proto",
}
