// Code generated by MockGen. DO NOT EDIT.
// Source: ./web/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServable is a mock of Servable interface.
type MockServable struct {
	ctrl     *gomock.Controller
	recorder *MockServableMockRecorder
}

// MockServableMockRecorder is the mock recorder for MockServable.
type MockServableMockRecorder struct {
	mock *MockServable
}

// NewMockServable creates a new mock instance.
func NewMockServable(ctrl *gomock.Controller) *MockServable {
	mock := &MockServable{ctrl: ctrl}
	mock.recorder = &MockServableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServable) EXPECT() *MockServableMockRecorder {
	return m.recorder
}

// Serve mocks base method.
func (m *MockServable) Serve(port int, err chan string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Serve", port, err)
}

// Serve indicates an expected call of Serve.
func (mr *MockServableMockRecorder) Serve(port, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockServable)(nil).Serve), port, err)
}
