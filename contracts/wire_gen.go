// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package contracts

import (
	"contract-service/proto"
	"contract-service/storage"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

func InitializeContractTransactionHandler(client pb.SigningServiceClient, contractConfig storage.ContractConfig, transactionConfig storage.TransactionConfig) (ContractTransactionHandler, error) {
	contractRepository, err := storage.NewContractRepository(contractConfig)
	if err != nil {
		return nil, err
	}
	transactionRepository, err := storage.NewTransactionRepo(transactionConfig)
	if err != nil {
		return nil, err
	}
	contractTransactionHandler := NewContractTransactionHandler(contractRepository, client, transactionRepository)
	return contractTransactionHandler, nil
}

func InitializeContractManagerHandler(contractConfig storage.ContractConfig) (ContractManagerHandler, error) {
	contractRepository, err := storage.NewContractRepository(contractConfig)
	if err != nil {
		return nil, err
	}
	contractManagerHandler := NewContractManagerHandler(contractRepository)
	return contractManagerHandler, nil
}

func InitializeTransactionServer(port int, opts []grpc.ServerOption, client pb.SigningServiceClient, contractConfig storage.ContractConfig, transactionConfig storage.TransactionConfig) (*TransactionRPCService, error) {
	contractTransactionHandler, err := InitializeContractTransactionHandler(client, contractConfig, transactionConfig)
	if err != nil {
		return nil, err
	}
	transactionRPCService, err := NewTransactionServer(port, opts, contractTransactionHandler)
	if err != nil {
		return nil, err
	}
	return transactionRPCService, nil
}

func InitializeContractServer(port int, opts []grpc.ServerOption, contractConfig storage.ContractConfig) (*ContractRPCService, error) {
	contractManagerHandler, err := InitializeContractManagerHandler(contractConfig)
	if err != nil {
		return nil, err
	}
	contractRPCService, err := NewContractServer(port, opts, contractManagerHandler)
	if err != nil {
		return nil, err
	}
	return contractRPCService, nil
}
