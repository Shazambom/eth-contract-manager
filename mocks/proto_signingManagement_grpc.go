// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/signingManagement_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "bitbucket.org/artie_inc/contract-service/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSigningServiceClient is a mock of SigningServiceClient interface.
type MockSigningServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSigningServiceClientMockRecorder
}

// MockSigningServiceClientMockRecorder is the mock recorder for MockSigningServiceClient.
type MockSigningServiceClientMockRecorder struct {
	mock *MockSigningServiceClient
}

// NewMockSigningServiceClient creates a new mock instance.
func NewMockSigningServiceClient(ctrl *gomock.Controller) *MockSigningServiceClient {
	mock := &MockSigningServiceClient{ctrl: ctrl}
	mock.recorder = &MockSigningServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigningServiceClient) EXPECT() *MockSigningServiceClientMockRecorder {
	return m.recorder
}

// BatchSignTxn mocks base method.
func (m *MockSigningServiceClient) BatchSignTxn(ctx context.Context, in *pb.BatchSignatureRequest, opts ...grpc.CallOption) (*pb.BatchSignatureResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchSignTxn", varargs...)
	ret0, _ := ret[0].(*pb.BatchSignatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSignTxn indicates an expected call of BatchSignTxn.
func (mr *MockSigningServiceClientMockRecorder) BatchSignTxn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSignTxn", reflect.TypeOf((*MockSigningServiceClient)(nil).BatchSignTxn), varargs...)
}

// DeleteKey mocks base method.
func (m *MockSigningServiceClient) DeleteKey(ctx context.Context, in *pb.KeyManagementRequest, opts ...grpc.CallOption) (*pb.KeyManagementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKey", varargs...)
	ret0, _ := ret[0].(*pb.KeyManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockSigningServiceClientMockRecorder) DeleteKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockSigningServiceClient)(nil).DeleteKey), varargs...)
}

// GenerateNewKey mocks base method.
func (m *MockSigningServiceClient) GenerateNewKey(ctx context.Context, in *pb.KeyManagementRequest, opts ...grpc.CallOption) (*pb.KeyManagementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateNewKey", varargs...)
	ret0, _ := ret[0].(*pb.KeyManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateNewKey indicates an expected call of GenerateNewKey.
func (mr *MockSigningServiceClientMockRecorder) GenerateNewKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewKey", reflect.TypeOf((*MockSigningServiceClient)(nil).GenerateNewKey), varargs...)
}

// GetKey mocks base method.
func (m *MockSigningServiceClient) GetKey(ctx context.Context, in *pb.KeyManagementRequest, opts ...grpc.CallOption) (*pb.KeyManagementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKey", varargs...)
	ret0, _ := ret[0].(*pb.KeyManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockSigningServiceClientMockRecorder) GetKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockSigningServiceClient)(nil).GetKey), varargs...)
}

// SignTxn mocks base method.
func (m *MockSigningServiceClient) SignTxn(ctx context.Context, in *pb.SignatureRequest, opts ...grpc.CallOption) (*pb.SignatureResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignTxn", varargs...)
	ret0, _ := ret[0].(*pb.SignatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTxn indicates an expected call of SignTxn.
func (mr *MockSigningServiceClientMockRecorder) SignTxn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTxn", reflect.TypeOf((*MockSigningServiceClient)(nil).SignTxn), varargs...)
}

// MockSigningServiceServer is a mock of SigningServiceServer interface.
type MockSigningServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSigningServiceServerMockRecorder
}

// MockSigningServiceServerMockRecorder is the mock recorder for MockSigningServiceServer.
type MockSigningServiceServerMockRecorder struct {
	mock *MockSigningServiceServer
}

// NewMockSigningServiceServer creates a new mock instance.
func NewMockSigningServiceServer(ctrl *gomock.Controller) *MockSigningServiceServer {
	mock := &MockSigningServiceServer{ctrl: ctrl}
	mock.recorder = &MockSigningServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigningServiceServer) EXPECT() *MockSigningServiceServerMockRecorder {
	return m.recorder
}

// BatchSignTxn mocks base method.
func (m *MockSigningServiceServer) BatchSignTxn(arg0 context.Context, arg1 *pb.BatchSignatureRequest) (*pb.BatchSignatureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSignTxn", arg0, arg1)
	ret0, _ := ret[0].(*pb.BatchSignatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSignTxn indicates an expected call of BatchSignTxn.
func (mr *MockSigningServiceServerMockRecorder) BatchSignTxn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSignTxn", reflect.TypeOf((*MockSigningServiceServer)(nil).BatchSignTxn), arg0, arg1)
}

// DeleteKey mocks base method.
func (m *MockSigningServiceServer) DeleteKey(arg0 context.Context, arg1 *pb.KeyManagementRequest) (*pb.KeyManagementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", arg0, arg1)
	ret0, _ := ret[0].(*pb.KeyManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockSigningServiceServerMockRecorder) DeleteKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockSigningServiceServer)(nil).DeleteKey), arg0, arg1)
}

// GenerateNewKey mocks base method.
func (m *MockSigningServiceServer) GenerateNewKey(arg0 context.Context, arg1 *pb.KeyManagementRequest) (*pb.KeyManagementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNewKey", arg0, arg1)
	ret0, _ := ret[0].(*pb.KeyManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateNewKey indicates an expected call of GenerateNewKey.
func (mr *MockSigningServiceServerMockRecorder) GenerateNewKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewKey", reflect.TypeOf((*MockSigningServiceServer)(nil).GenerateNewKey), arg0, arg1)
}

// GetKey mocks base method.
func (m *MockSigningServiceServer) GetKey(arg0 context.Context, arg1 *pb.KeyManagementRequest) (*pb.KeyManagementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", arg0, arg1)
	ret0, _ := ret[0].(*pb.KeyManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockSigningServiceServerMockRecorder) GetKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockSigningServiceServer)(nil).GetKey), arg0, arg1)
}

// SignTxn mocks base method.
func (m *MockSigningServiceServer) SignTxn(arg0 context.Context, arg1 *pb.SignatureRequest) (*pb.SignatureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTxn", arg0, arg1)
	ret0, _ := ret[0].(*pb.SignatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTxn indicates an expected call of SignTxn.
func (mr *MockSigningServiceServerMockRecorder) SignTxn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTxn", reflect.TypeOf((*MockSigningServiceServer)(nil).SignTxn), arg0, arg1)
}

// mustEmbedUnimplementedSigningServiceServer mocks base method.
func (m *MockSigningServiceServer) mustEmbedUnimplementedSigningServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSigningServiceServer")
}

// mustEmbedUnimplementedSigningServiceServer indicates an expected call of mustEmbedUnimplementedSigningServiceServer.
func (mr *MockSigningServiceServerMockRecorder) mustEmbedUnimplementedSigningServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSigningServiceServer", reflect.TypeOf((*MockSigningServiceServer)(nil).mustEmbedUnimplementedSigningServiceServer))
}

// MockUnsafeSigningServiceServer is a mock of UnsafeSigningServiceServer interface.
type MockUnsafeSigningServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSigningServiceServerMockRecorder
}

// MockUnsafeSigningServiceServerMockRecorder is the mock recorder for MockUnsafeSigningServiceServer.
type MockUnsafeSigningServiceServerMockRecorder struct {
	mock *MockUnsafeSigningServiceServer
}

// NewMockUnsafeSigningServiceServer creates a new mock instance.
func NewMockUnsafeSigningServiceServer(ctrl *gomock.Controller) *MockUnsafeSigningServiceServer {
	mock := &MockUnsafeSigningServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSigningServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSigningServiceServer) EXPECT() *MockUnsafeSigningServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSigningServiceServer mocks base method.
func (m *MockUnsafeSigningServiceServer) mustEmbedUnimplementedSigningServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSigningServiceServer")
}

// mustEmbedUnimplementedSigningServiceServer indicates an expected call of mustEmbedUnimplementedSigningServiceServer.
func (mr *MockUnsafeSigningServiceServerMockRecorder) mustEmbedUnimplementedSigningServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSigningServiceServer", reflect.TypeOf((*MockUnsafeSigningServiceServer)(nil).mustEmbedUnimplementedSigningServiceServer))
}

// MockVerificationServiceClient is a mock of VerificationServiceClient interface.
type MockVerificationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVerificationServiceClientMockRecorder
}

// MockVerificationServiceClientMockRecorder is the mock recorder for MockVerificationServiceClient.
type MockVerificationServiceClientMockRecorder struct {
	mock *MockVerificationServiceClient
}

// NewMockVerificationServiceClient creates a new mock instance.
func NewMockVerificationServiceClient(ctrl *gomock.Controller) *MockVerificationServiceClient {
	mock := &MockVerificationServiceClient{ctrl: ctrl}
	mock.recorder = &MockVerificationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerificationServiceClient) EXPECT() *MockVerificationServiceClientMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockVerificationServiceClient) Verify(ctx context.Context, in *pb.SignatureVerificationRequest, opts ...grpc.CallOption) (*pb.SignatureVerificationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Verify", varargs...)
	ret0, _ := ret[0].(*pb.SignatureVerificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockVerificationServiceClientMockRecorder) Verify(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockVerificationServiceClient)(nil).Verify), varargs...)
}

// MockVerificationServiceServer is a mock of VerificationServiceServer interface.
type MockVerificationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockVerificationServiceServerMockRecorder
}

// MockVerificationServiceServerMockRecorder is the mock recorder for MockVerificationServiceServer.
type MockVerificationServiceServerMockRecorder struct {
	mock *MockVerificationServiceServer
}

// NewMockVerificationServiceServer creates a new mock instance.
func NewMockVerificationServiceServer(ctrl *gomock.Controller) *MockVerificationServiceServer {
	mock := &MockVerificationServiceServer{ctrl: ctrl}
	mock.recorder = &MockVerificationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerificationServiceServer) EXPECT() *MockVerificationServiceServerMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockVerificationServiceServer) Verify(arg0 context.Context, arg1 *pb.SignatureVerificationRequest) (*pb.SignatureVerificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(*pb.SignatureVerificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockVerificationServiceServerMockRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockVerificationServiceServer)(nil).Verify), arg0, arg1)
}

// mustEmbedUnimplementedVerificationServiceServer mocks base method.
func (m *MockVerificationServiceServer) mustEmbedUnimplementedVerificationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVerificationServiceServer")
}

// mustEmbedUnimplementedVerificationServiceServer indicates an expected call of mustEmbedUnimplementedVerificationServiceServer.
func (mr *MockVerificationServiceServerMockRecorder) mustEmbedUnimplementedVerificationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVerificationServiceServer", reflect.TypeOf((*MockVerificationServiceServer)(nil).mustEmbedUnimplementedVerificationServiceServer))
}

// MockUnsafeVerificationServiceServer is a mock of UnsafeVerificationServiceServer interface.
type MockUnsafeVerificationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeVerificationServiceServerMockRecorder
}

// MockUnsafeVerificationServiceServerMockRecorder is the mock recorder for MockUnsafeVerificationServiceServer.
type MockUnsafeVerificationServiceServerMockRecorder struct {
	mock *MockUnsafeVerificationServiceServer
}

// NewMockUnsafeVerificationServiceServer creates a new mock instance.
func NewMockUnsafeVerificationServiceServer(ctrl *gomock.Controller) *MockUnsafeVerificationServiceServer {
	mock := &MockUnsafeVerificationServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeVerificationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeVerificationServiceServer) EXPECT() *MockUnsafeVerificationServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedVerificationServiceServer mocks base method.
func (m *MockUnsafeVerificationServiceServer) mustEmbedUnimplementedVerificationServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedVerificationServiceServer")
}

// mustEmbedUnimplementedVerificationServiceServer indicates an expected call of mustEmbedUnimplementedVerificationServiceServer.
func (mr *MockUnsafeVerificationServiceServerMockRecorder) mustEmbedUnimplementedVerificationServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedVerificationServiceServer", reflect.TypeOf((*MockUnsafeVerificationServiceServer)(nil).mustEmbedUnimplementedVerificationServiceServer))
}
