version: '3.8'
services:
  redis:
    image: "redis:alpine"
    command: redis-server
    ports:
      - "6379:6379"
    volumes:
      - $PWD/redis-data:/var/lib/redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - contract-service

  s3:
    image: localstack/localstack:latest-arm64
    environment:
      SERVICES: s3
      AWS_ACCESS_KEY_ID: xxx
      AWS_SECRET_ACCESS_KEY: yyy
      DATA_DIR: /tmp/localstack/data
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      CacheControl: no-cache
    ports:
      - "4566:4566"
    networks:
      - contract-service
    volumes:
      - ./aws:/docker-entrypoint-initaws.d
    healthcheck:
      test: ["CMD", "bash", "-c", "awslocal s3 ls"]
      interval: 5s
      timeout: 10s
      start_period: 10s

  dynamodb:
    image: localstack/localstack:latest-arm64
    environment:
      SERVICES: dynamodb
      AWS_ACCESS_KEY_ID: xxx
      AWS_SECRET_ACCESS_KEY: yyy
      DATA_DIR: /tmp/localstack/data
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      CacheControl: no-cache
    ports:
      - "8000:8000"
    networks:
      - contract-service
    volumes:
      - ./aws:/docker-entrypoint-initaws.d
    healthcheck:
      test: [ "CMD", "bash", "-c", "awslocal dynamodb list-tables" ]
      interval: 5s
      timeout: 10s
      start_period: 10s

#TODO Implement health check on listener service
  listener:
    build:
      context: ..
      dockerfile: ./build/listener/Dockerfile
    restart: always
    environment:
      RDS_ENDPOINT: "redis:6379"
      RDS_PWD: ""
      AWS_ENDPOINT: "s3:4566"
      AWS_REGION: "us-east-1"
      BUCKET_NAME: "tokens"
      AWS_ACCESS_KEY_ID: "xxx"
      AWS_SECRET_ACCESS_KEY: "yyy"
      SSL_ENABLED: "false"
    networks:
      - contract-service
    depends_on:
      redis:
        condition: service_healthy
      s3:
        condition: service_healthy

#TODO Implement health check on signer service
  signer:
    build:
      context: ..
      dockerfile: ./build/signer/Dockerfile
    restart: always
    environment:
      TABLE_NAME: "ContractPrivateKeyRepository"
      AWS_ENDPOINT: "dynamodb:8000"
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: "xxx"
      AWS_SECRET_ACCESS_KEY: "yyy"
      SSL_ENABLED: "false"
      GRPC_PORT: 8081
    networks:
      - contract-service
    depends_on:
      dynamodb:
        condition: service_healthy

  contract-manager:
    build:
      context: ..
      dockerfile: ./build/contract-manager/Dockerfile
    restart: always
    environment:
      TABLE_NAME: "Contracts"
      AWS_ENDPOINT: "dynamodb:8000"
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: "xxx"
      AWS_SECRET_ACCESS_KEY: "yyy"
      SSL_ENABLED: "false"
      GRPC_PORT: 8082
    networks:
      - contract-service
    depends_on:
      dynamodb:
        condition: service_healthy

  transaction-manager:
    build:
      context: ..
      dockerfile: ./build/transaction-manager/Dockerfile
    restart: always
    environment:
      REDIS_HOST: "redis:6379"
      TABLE_NAME: "Contracts"
      SIGNER_HOST: "signer:8081"
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: "xxx"
      AWS_SECRET_ACCESS_KEY: "yyy"
      SSL_ENABLED: "false"
      GPRC_PORT: 8083
    networks:
      - contract-service
    depends_on:
      dynamodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      signer:
        condition: service_healthy
      listener:
        condition: service_healthy

#TODO Spin up API service for external APIs



networks:
  contract-service: {}
